/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.15.6
 * source: code2gather.proto
 * git: https://github.com/thesayyn/protoc-gen-ts
 * buymeacoffee: https://www.buymeacoffee.com/thesayyn
 *  */
import * as pb_1 from "google-protobuf";
export namespace code2gather {
    export enum QuestionDifficulty {
        EASY = 0,
        MEDIUM = 1,
        HARD = 2
    }
    export enum Language {
        PYTHON = 0,
        JAVA = 1,
        JAVASCRIPT = 2
    }
    export enum ErrorCode {
        NO_ERROR = 0,
        UNKNOWN_ERROR = -1,
        MESSAGE_CODING_ERROR = 1,
        UNAUTHORIZED_USER = 2
    }
    export class QuestionMessage extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            title?: string;
            text?: string;
            difficulty?: QuestionDifficulty;
            hints?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("title" in data && data.title != undefined) {
                    this.title = data.title;
                }
                if ("text" in data && data.text != undefined) {
                    this.text = data.text;
                }
                if ("difficulty" in data && data.difficulty != undefined) {
                    this.difficulty = data.difficulty;
                }
                if ("hints" in data && data.hints != undefined) {
                    this.hints = data.hints;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get title() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set title(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get text() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set text(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get difficulty() {
            return pb_1.Message.getField(this, 4) as QuestionDifficulty;
        }
        set difficulty(value: QuestionDifficulty) {
            pb_1.Message.setField(this, 4, value);
        }
        get hints() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set hints(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            title?: string;
            text?: string;
            difficulty?: QuestionDifficulty;
            hints?: string;
        }) {
            const message = new QuestionMessage({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.title != null) {
                message.title = data.title;
            }
            if (data.text != null) {
                message.text = data.text;
            }
            if (data.difficulty != null) {
                message.difficulty = data.difficulty;
            }
            if (data.hints != null) {
                message.hints = data.hints;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                title?: string;
                text?: string;
                difficulty?: QuestionDifficulty;
                hints?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.title != null) {
                data.title = this.title;
            }
            if (this.text != null) {
                data.text = this.text;
            }
            if (this.difficulty != null) {
                data.difficulty = this.difficulty;
            }
            if (this.hints != null) {
                data.hints = this.hints;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.title === "string" && this.title.length)
                writer.writeString(2, this.title);
            if (typeof this.text === "string" && this.text.length)
                writer.writeString(3, this.text);
            if (this.difficulty !== undefined)
                writer.writeEnum(4, this.difficulty);
            if (typeof this.hints === "string" && this.hints.length)
                writer.writeString(5, this.hints);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuestionMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuestionMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.title = reader.readString();
                        break;
                    case 3:
                        message.text = reader.readString();
                        break;
                    case 4:
                        message.difficulty = reader.readEnum();
                        break;
                    case 5:
                        message.hints = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuestionMessage {
            return QuestionMessage.deserialize(bytes);
        }
    }
    export class RoomMessage extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            uid1?: string;
            uid2?: string;
            qid1?: string;
            qid2?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("uid1" in data && data.uid1 != undefined) {
                    this.uid1 = data.uid1;
                }
                if ("uid2" in data && data.uid2 != undefined) {
                    this.uid2 = data.uid2;
                }
                if ("qid1" in data && data.qid1 != undefined) {
                    this.qid1 = data.qid1;
                }
                if ("qid2" in data && data.qid2 != undefined) {
                    this.qid2 = data.qid2;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get uid1() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set uid1(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get uid2() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set uid2(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get qid1() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set qid1(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get qid2() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set qid2(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            uid1?: string;
            uid2?: string;
            qid1?: string;
            qid2?: string;
        }) {
            const message = new RoomMessage({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.uid1 != null) {
                message.uid1 = data.uid1;
            }
            if (data.uid2 != null) {
                message.uid2 = data.uid2;
            }
            if (data.qid1 != null) {
                message.qid1 = data.qid1;
            }
            if (data.qid2 != null) {
                message.qid2 = data.qid2;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                uid1?: string;
                uid2?: string;
                qid1?: string;
                qid2?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.uid1 != null) {
                data.uid1 = this.uid1;
            }
            if (this.uid2 != null) {
                data.uid2 = this.uid2;
            }
            if (this.qid1 != null) {
                data.qid1 = this.qid1;
            }
            if (this.qid2 != null) {
                data.qid2 = this.qid2;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.uid1 === "string" && this.uid1.length)
                writer.writeString(2, this.uid1);
            if (typeof this.uid2 === "string" && this.uid2.length)
                writer.writeString(3, this.uid2);
            if (typeof this.qid1 === "string" && this.qid1.length)
                writer.writeString(4, this.qid1);
            if (typeof this.qid2 === "string" && this.qid2.length)
                writer.writeString(5, this.qid2);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.uid1 = reader.readString();
                        break;
                    case 3:
                        message.uid2 = reader.readString();
                        break;
                    case 4:
                        message.qid1 = reader.readString();
                        break;
                    case 5:
                        message.qid2 = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomMessage {
            return RoomMessage.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            github_username?: string;
            photo_url?: string;
            profile_url?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("github_username" in data && data.github_username != undefined) {
                    this.github_username = data.github_username;
                }
                if ("photo_url" in data && data.photo_url != undefined) {
                    this.photo_url = data.photo_url;
                }
                if ("profile_url" in data && data.profile_url != undefined) {
                    this.profile_url = data.profile_url;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get github_username() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set github_username(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get photo_url() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set photo_url(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get profile_url() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set profile_url(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            id?: string;
            github_username?: string;
            photo_url?: string;
            profile_url?: string;
        }) {
            const message = new User({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.github_username != null) {
                message.github_username = data.github_username;
            }
            if (data.photo_url != null) {
                message.photo_url = data.photo_url;
            }
            if (data.profile_url != null) {
                message.profile_url = data.profile_url;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                github_username?: string;
                photo_url?: string;
                profile_url?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.github_username != null) {
                data.github_username = this.github_username;
            }
            if (this.photo_url != null) {
                data.photo_url = this.photo_url;
            }
            if (this.profile_url != null) {
                data.profile_url = this.profile_url;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.github_username === "string" && this.github_username.length)
                writer.writeString(2, this.github_username);
            if (typeof this.photo_url === "string" && this.photo_url.length)
                writer.writeString(3, this.photo_url);
            if (typeof this.profile_url === "string" && this.profile_url.length)
                writer.writeString(4, this.profile_url);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.github_username = reader.readString();
                        break;
                    case 3:
                        message.photo_url = reader.readString();
                        break;
                    case 4:
                        message.profile_url = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class CreateRoomRequest extends pb_1.Message {
        constructor(data?: any[] | {
            uid1?: string;
            uid2?: string;
            difficulty?: QuestionDifficulty;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uid1" in data && data.uid1 != undefined) {
                    this.uid1 = data.uid1;
                }
                if ("uid2" in data && data.uid2 != undefined) {
                    this.uid2 = data.uid2;
                }
                if ("difficulty" in data && data.difficulty != undefined) {
                    this.difficulty = data.difficulty;
                }
            }
        }
        get uid1() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set uid1(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get uid2() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set uid2(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get difficulty() {
            return pb_1.Message.getField(this, 3) as QuestionDifficulty;
        }
        set difficulty(value: QuestionDifficulty) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            uid1?: string;
            uid2?: string;
            difficulty?: QuestionDifficulty;
        }) {
            const message = new CreateRoomRequest({});
            if (data.uid1 != null) {
                message.uid1 = data.uid1;
            }
            if (data.uid2 != null) {
                message.uid2 = data.uid2;
            }
            if (data.difficulty != null) {
                message.difficulty = data.difficulty;
            }
            return message;
        }
        toObject() {
            const data: {
                uid1?: string;
                uid2?: string;
                difficulty?: QuestionDifficulty;
            } = {};
            if (this.uid1 != null) {
                data.uid1 = this.uid1;
            }
            if (this.uid2 != null) {
                data.uid2 = this.uid2;
            }
            if (this.difficulty != null) {
                data.difficulty = this.difficulty;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.uid1 === "string" && this.uid1.length)
                writer.writeString(1, this.uid1);
            if (typeof this.uid2 === "string" && this.uid2.length)
                writer.writeString(2, this.uid2);
            if (this.difficulty !== undefined)
                writer.writeEnum(3, this.difficulty);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid1 = reader.readString();
                        break;
                    case 2:
                        message.uid2 = reader.readString();
                        break;
                    case 3:
                        message.difficulty = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoomRequest {
            return CreateRoomRequest.deserialize(bytes);
        }
    }
    export class CreateRoomResponse extends pb_1.Message {
        constructor(data?: any[] | {
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            room_id?: string;
        }) {
            const message = new CreateRoomResponse({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.room_id === "string" && this.room_id.length)
                writer.writeString(1, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRoomResponse {
            return CreateRoomResponse.deserialize(bytes);
        }
    }
    export class CheckInRoomRequest extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(_data: {}) {
            const message = new CheckInRoomRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckInRoomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckInRoomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckInRoomRequest {
            return CheckInRoomRequest.deserialize(bytes);
        }
    }
    export class CheckInRoomResponse extends pb_1.Message {
        constructor(data?: any[] | {
            is_in_room?: boolean;
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_in_room" in data && data.is_in_room != undefined) {
                    this.is_in_room = data.is_in_room;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get is_in_room() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set is_in_room(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get room_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            is_in_room?: boolean;
            room_id?: string;
        }) {
            const message = new CheckInRoomResponse({});
            if (data.is_in_room != null) {
                message.is_in_room = data.is_in_room;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                is_in_room?: boolean;
                room_id?: string;
            } = {};
            if (this.is_in_room != null) {
                data.is_in_room = this.is_in_room;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_in_room !== undefined)
                writer.writeBool(1, this.is_in_room);
            if (typeof this.room_id === "string" && this.room_id.length)
                writer.writeString(2, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CheckInRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CheckInRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_in_room = reader.readBool();
                        break;
                    case 2:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CheckInRoomResponse {
            return CheckInRoomResponse.deserialize(bytes);
        }
    }
    export class CreateMeetingRequest extends pb_1.Message {
        constructor(data?: any[] | {
            interviewer_id?: string;
            interviewee_id?: string;
            duration?: number;
            question_id?: string;
            question_title?: string;
            difficulty?: QuestionDifficulty;
            language?: Language;
            code_written?: string;
            is_solved?: boolean;
            feedback_to_interviewee?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("interviewer_id" in data && data.interviewer_id != undefined) {
                    this.interviewer_id = data.interviewer_id;
                }
                if ("interviewee_id" in data && data.interviewee_id != undefined) {
                    this.interviewee_id = data.interviewee_id;
                }
                if ("duration" in data && data.duration != undefined) {
                    this.duration = data.duration;
                }
                if ("question_id" in data && data.question_id != undefined) {
                    this.question_id = data.question_id;
                }
                if ("question_title" in data && data.question_title != undefined) {
                    this.question_title = data.question_title;
                }
                if ("difficulty" in data && data.difficulty != undefined) {
                    this.difficulty = data.difficulty;
                }
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
                if ("code_written" in data && data.code_written != undefined) {
                    this.code_written = data.code_written;
                }
                if ("is_solved" in data && data.is_solved != undefined) {
                    this.is_solved = data.is_solved;
                }
                if ("feedback_to_interviewee" in data && data.feedback_to_interviewee != undefined) {
                    this.feedback_to_interviewee = data.feedback_to_interviewee;
                }
            }
        }
        get interviewer_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set interviewer_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get interviewee_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set interviewee_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get duration() {
            return pb_1.Message.getField(this, 3) as number;
        }
        set duration(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get question_id() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set question_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get question_title() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set question_title(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get difficulty() {
            return pb_1.Message.getField(this, 6) as QuestionDifficulty;
        }
        set difficulty(value: QuestionDifficulty) {
            pb_1.Message.setField(this, 6, value);
        }
        get language() {
            return pb_1.Message.getField(this, 7) as Language;
        }
        set language(value: Language) {
            pb_1.Message.setField(this, 7, value);
        }
        get code_written() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set code_written(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get is_solved() {
            return pb_1.Message.getField(this, 9) as boolean;
        }
        set is_solved(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get feedback_to_interviewee() {
            return pb_1.Message.getField(this, 10) as string;
        }
        set feedback_to_interviewee(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        static fromObject(data: {
            interviewer_id?: string;
            interviewee_id?: string;
            duration?: number;
            question_id?: string;
            question_title?: string;
            difficulty?: QuestionDifficulty;
            language?: Language;
            code_written?: string;
            is_solved?: boolean;
            feedback_to_interviewee?: string;
        }) {
            const message = new CreateMeetingRequest({});
            if (data.interviewer_id != null) {
                message.interviewer_id = data.interviewer_id;
            }
            if (data.interviewee_id != null) {
                message.interviewee_id = data.interviewee_id;
            }
            if (data.duration != null) {
                message.duration = data.duration;
            }
            if (data.question_id != null) {
                message.question_id = data.question_id;
            }
            if (data.question_title != null) {
                message.question_title = data.question_title;
            }
            if (data.difficulty != null) {
                message.difficulty = data.difficulty;
            }
            if (data.language != null) {
                message.language = data.language;
            }
            if (data.code_written != null) {
                message.code_written = data.code_written;
            }
            if (data.is_solved != null) {
                message.is_solved = data.is_solved;
            }
            if (data.feedback_to_interviewee != null) {
                message.feedback_to_interviewee = data.feedback_to_interviewee;
            }
            return message;
        }
        toObject() {
            const data: {
                interviewer_id?: string;
                interviewee_id?: string;
                duration?: number;
                question_id?: string;
                question_title?: string;
                difficulty?: QuestionDifficulty;
                language?: Language;
                code_written?: string;
                is_solved?: boolean;
                feedback_to_interviewee?: string;
            } = {};
            if (this.interviewer_id != null) {
                data.interviewer_id = this.interviewer_id;
            }
            if (this.interviewee_id != null) {
                data.interviewee_id = this.interviewee_id;
            }
            if (this.duration != null) {
                data.duration = this.duration;
            }
            if (this.question_id != null) {
                data.question_id = this.question_id;
            }
            if (this.question_title != null) {
                data.question_title = this.question_title;
            }
            if (this.difficulty != null) {
                data.difficulty = this.difficulty;
            }
            if (this.language != null) {
                data.language = this.language;
            }
            if (this.code_written != null) {
                data.code_written = this.code_written;
            }
            if (this.is_solved != null) {
                data.is_solved = this.is_solved;
            }
            if (this.feedback_to_interviewee != null) {
                data.feedback_to_interviewee = this.feedback_to_interviewee;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.interviewer_id === "string" && this.interviewer_id.length)
                writer.writeString(1, this.interviewer_id);
            if (typeof this.interviewee_id === "string" && this.interviewee_id.length)
                writer.writeString(2, this.interviewee_id);
            if (this.duration !== undefined)
                writer.writeInt32(3, this.duration);
            if (typeof this.question_id === "string" && this.question_id.length)
                writer.writeString(4, this.question_id);
            if (typeof this.question_title === "string" && this.question_title.length)
                writer.writeString(5, this.question_title);
            if (this.difficulty !== undefined)
                writer.writeEnum(6, this.difficulty);
            if (this.language !== undefined)
                writer.writeEnum(7, this.language);
            if (typeof this.code_written === "string" && this.code_written.length)
                writer.writeString(8, this.code_written);
            if (this.is_solved !== undefined)
                writer.writeBool(9, this.is_solved);
            if (typeof this.feedback_to_interviewee === "string" && this.feedback_to_interviewee.length)
                writer.writeString(10, this.feedback_to_interviewee);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateMeetingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateMeetingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.interviewer_id = reader.readString();
                        break;
                    case 2:
                        message.interviewee_id = reader.readString();
                        break;
                    case 3:
                        message.duration = reader.readInt32();
                        break;
                    case 4:
                        message.question_id = reader.readString();
                        break;
                    case 5:
                        message.question_title = reader.readString();
                        break;
                    case 6:
                        message.difficulty = reader.readEnum();
                        break;
                    case 7:
                        message.language = reader.readEnum();
                        break;
                    case 8:
                        message.code_written = reader.readString();
                        break;
                    case 9:
                        message.is_solved = reader.readBool();
                        break;
                    case 10:
                        message.feedback_to_interviewee = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateMeetingRequest {
            return CreateMeetingRequest.deserialize(bytes);
        }
    }
    export class CreateRatingRequest extends pb_1.Message {
        constructor(data?: any[] | {
            rating?: number;
            rating_user_id?: string;
            rated_user_id?: string;
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rating" in data && data.rating != undefined) {
                    this.rating = data.rating;
                }
                if ("rating_user_id" in data && data.rating_user_id != undefined) {
                    this.rating_user_id = data.rating_user_id;
                }
                if ("rated_user_id" in data && data.rated_user_id != undefined) {
                    this.rated_user_id = data.rated_user_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get rating() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set rating(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get rating_user_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set rating_user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get rated_user_id() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set rated_user_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get room_id() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            rating?: number;
            rating_user_id?: string;
            rated_user_id?: string;
            room_id?: string;
        }) {
            const message = new CreateRatingRequest({});
            if (data.rating != null) {
                message.rating = data.rating;
            }
            if (data.rating_user_id != null) {
                message.rating_user_id = data.rating_user_id;
            }
            if (data.rated_user_id != null) {
                message.rated_user_id = data.rated_user_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                rating?: number;
                rating_user_id?: string;
                rated_user_id?: string;
                room_id?: string;
            } = {};
            if (this.rating != null) {
                data.rating = this.rating;
            }
            if (this.rating_user_id != null) {
                data.rating_user_id = this.rating_user_id;
            }
            if (this.rated_user_id != null) {
                data.rated_user_id = this.rated_user_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rating !== undefined)
                writer.writeInt32(1, this.rating);
            if (typeof this.rating_user_id === "string" && this.rating_user_id.length)
                writer.writeString(2, this.rating_user_id);
            if (typeof this.rated_user_id === "string" && this.rated_user_id.length)
                writer.writeString(3, this.rated_user_id);
            if (typeof this.room_id === "string" && this.room_id.length)
                writer.writeString(4, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateRatingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateRatingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.rating = reader.readInt32();
                        break;
                    case 2:
                        message.rating_user_id = reader.readString();
                        break;
                    case 3:
                        message.rated_user_id = reader.readString();
                        break;
                    case 4:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateRatingRequest {
            return CreateRatingRequest.deserialize(bytes);
        }
    }
    export class GetUserRequest extends pb_1.Message {
        constructor(data?: any[] | {
            uid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
            }
        }
        get uid() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uid?: string;
        }) {
            const message = new GetUserRequest({});
            if (data.uid != null) {
                message.uid = data.uid;
            }
            return message;
        }
        toObject() {
            const data: {
                uid?: string;
            } = {};
            if (this.uid != null) {
                data.uid = this.uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.uid === "string" && this.uid.length)
                writer.writeString(1, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetUserRequest {
            return GetUserRequest.deserialize(bytes);
        }
    }
    export class AuthResponse extends pb_1.Message {
        constructor(data?: any[] | {
            uid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("uid" in data && data.uid != undefined) {
                    this.uid = data.uid;
                }
            }
        }
        get uid() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            uid?: string;
        }) {
            const message = new AuthResponse({});
            if (data.uid != null) {
                message.uid = data.uid;
            }
            return message;
        }
        toObject() {
            const data: {
                uid?: string;
            } = {};
            if (this.uid != null) {
                data.uid = this.uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.uid === "string" && this.uid.length)
                writer.writeString(1, this.uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.uid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthResponse {
            return AuthResponse.deserialize(bytes);
        }
    }
    export class ErrorResponse extends pb_1.Message {
        constructor(data?: any[] | {
            error_code?: number;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_code" in data && data.error_code != undefined) {
                    this.error_code = data.error_code;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get error_code() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set error_code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            error_code?: number;
            message?: string;
        }) {
            const message = new ErrorResponse({});
            if (data.error_code != null) {
                message.error_code = data.error_code;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                error_code?: number;
                message?: string;
            } = {};
            if (this.error_code != null) {
                data.error_code = this.error_code;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_code !== undefined)
                writer.writeInt32(1, this.error_code);
            if (typeof this.message === "string" && this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ErrorResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ErrorResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_code = reader.readInt32();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ErrorResponse {
            return ErrorResponse.deserialize(bytes);
        }
    }
    export class ClientRequest extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            join_room_request?: JoinRoomRequest;
            complete_question_request?: never;
            submit_rating_request?: never;
            leave_room_request?: never;
        } | {
            join_room_request?: never;
            complete_question_request?: CompleteQuestionRequest;
            submit_rating_request?: never;
            leave_room_request?: never;
        } | {
            join_room_request?: never;
            complete_question_request?: never;
            submit_rating_request?: SubmitRatingRequest;
            leave_room_request?: never;
        } | {
            join_room_request?: never;
            complete_question_request?: never;
            submit_rating_request?: never;
            leave_room_request?: LeaveRoomRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2, 3, 4]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("join_room_request" in data && data.join_room_request != undefined) {
                    this.join_room_request = data.join_room_request;
                }
                if ("complete_question_request" in data && data.complete_question_request != undefined) {
                    this.complete_question_request = data.complete_question_request;
                }
                if ("submit_rating_request" in data && data.submit_rating_request != undefined) {
                    this.submit_rating_request = data.submit_rating_request;
                }
                if ("leave_room_request" in data && data.leave_room_request != undefined) {
                    this.leave_room_request = data.leave_room_request;
                }
            }
        }
        get join_room_request() {
            return pb_1.Message.getWrapperField(this, JoinRoomRequest, 1) as JoinRoomRequest;
        }
        set join_room_request(value: JoinRoomRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, [1, 2, 3, 4], value);
        }
        get complete_question_request() {
            return pb_1.Message.getWrapperField(this, CompleteQuestionRequest, 2) as CompleteQuestionRequest;
        }
        set complete_question_request(value: CompleteQuestionRequest) {
            pb_1.Message.setOneofWrapperField(this, 2, [1, 2, 3, 4], value);
        }
        get submit_rating_request() {
            return pb_1.Message.getWrapperField(this, SubmitRatingRequest, 3) as SubmitRatingRequest;
        }
        set submit_rating_request(value: SubmitRatingRequest) {
            pb_1.Message.setOneofWrapperField(this, 3, [1, 2, 3, 4], value);
        }
        get leave_room_request() {
            return pb_1.Message.getWrapperField(this, LeaveRoomRequest, 4) as LeaveRoomRequest;
        }
        set leave_room_request(value: LeaveRoomRequest) {
            pb_1.Message.setOneofWrapperField(this, 4, [1, 2, 3, 4], value);
        }
        get request() {
            const cases: {
                [index: number]: "none" | "join_room_request" | "complete_question_request" | "submit_rating_request" | "leave_room_request";
            } = {
                0: "none",
                1: "join_room_request",
                2: "complete_question_request",
                3: "submit_rating_request",
                4: "leave_room_request"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4])];
        }
        static fromObject(data: {
            join_room_request?: ReturnType<typeof JoinRoomRequest.prototype.toObject>;
            complete_question_request?: ReturnType<typeof CompleteQuestionRequest.prototype.toObject>;
            submit_rating_request?: ReturnType<typeof SubmitRatingRequest.prototype.toObject>;
            leave_room_request?: ReturnType<typeof LeaveRoomRequest.prototype.toObject>;
        }) {
            const message = new ClientRequest({});
            if (data.join_room_request != null) {
                message.join_room_request = JoinRoomRequest.fromObject(data.join_room_request);
            }
            if (data.complete_question_request != null) {
                message.complete_question_request = CompleteQuestionRequest.fromObject(data.complete_question_request);
            }
            if (data.submit_rating_request != null) {
                message.submit_rating_request = SubmitRatingRequest.fromObject(data.submit_rating_request);
            }
            if (data.leave_room_request != null) {
                message.leave_room_request = LeaveRoomRequest.fromObject(data.leave_room_request);
            }
            return message;
        }
        toObject() {
            const data: {
                join_room_request?: ReturnType<typeof JoinRoomRequest.prototype.toObject>;
                complete_question_request?: ReturnType<typeof CompleteQuestionRequest.prototype.toObject>;
                submit_rating_request?: ReturnType<typeof SubmitRatingRequest.prototype.toObject>;
                leave_room_request?: ReturnType<typeof LeaveRoomRequest.prototype.toObject>;
            } = {};
            if (this.join_room_request != null) {
                data.join_room_request = this.join_room_request.toObject();
            }
            if (this.complete_question_request != null) {
                data.complete_question_request = this.complete_question_request.toObject();
            }
            if (this.submit_rating_request != null) {
                data.submit_rating_request = this.submit_rating_request.toObject();
            }
            if (this.leave_room_request != null) {
                data.leave_room_request = this.leave_room_request.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.join_room_request !== undefined)
                writer.writeMessage(1, this.join_room_request, () => this.join_room_request.serialize(writer));
            if (this.complete_question_request !== undefined)
                writer.writeMessage(2, this.complete_question_request, () => this.complete_question_request.serialize(writer));
            if (this.submit_rating_request !== undefined)
                writer.writeMessage(3, this.submit_rating_request, () => this.submit_rating_request.serialize(writer));
            if (this.leave_room_request !== undefined)
                writer.writeMessage(4, this.leave_room_request, () => this.leave_room_request.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.join_room_request, () => message.join_room_request = JoinRoomRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.complete_question_request, () => message.complete_question_request = CompleteQuestionRequest.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.submit_rating_request, () => message.submit_rating_request = SubmitRatingRequest.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.leave_room_request, () => message.leave_room_request = LeaveRoomRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientRequest {
            return ClientRequest.deserialize(bytes);
        }
    }
    export class RoomServiceToClientMessage extends pb_1.Message {
        constructor(data?: any[] | ({} & (({
            join_room_response?: JoinRoomResponse;
            join_room_broadcast?: never;
            disconnect_broadcast?: never;
            complete_question_response?: never;
            submit_rating_response?: never;
            leave_room_response?: never;
            leave_room_broadcast?: never;
        } | {
            join_room_response?: never;
            join_room_broadcast?: JoinRoomBroadcast;
            disconnect_broadcast?: never;
            complete_question_response?: never;
            submit_rating_response?: never;
            leave_room_response?: never;
            leave_room_broadcast?: never;
        } | {
            join_room_response?: never;
            join_room_broadcast?: never;
            disconnect_broadcast?: DisconnectBroadcast;
            complete_question_response?: never;
            submit_rating_response?: never;
            leave_room_response?: never;
            leave_room_broadcast?: never;
        } | {
            join_room_response?: never;
            join_room_broadcast?: never;
            disconnect_broadcast?: never;
            complete_question_response?: CompleteQuestionResponse;
            submit_rating_response?: never;
            leave_room_response?: never;
            leave_room_broadcast?: never;
        } | {
            join_room_response?: never;
            join_room_broadcast?: never;
            disconnect_broadcast?: never;
            complete_question_response?: never;
            submit_rating_response?: SubmitRatingResponse;
            leave_room_response?: never;
            leave_room_broadcast?: never;
        } | {
            join_room_response?: never;
            join_room_broadcast?: never;
            disconnect_broadcast?: never;
            complete_question_response?: never;
            submit_rating_response?: never;
            leave_room_response?: LeaveRoomResponse;
            leave_room_broadcast?: never;
        } | {
            join_room_response?: never;
            join_room_broadcast?: never;
            disconnect_broadcast?: never;
            complete_question_response?: never;
            submit_rating_response?: never;
            leave_room_response?: never;
            leave_room_broadcast?: LeaveRoomBroadcast;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2, 3, 4, 5, 6, 7]]);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("join_room_response" in data && data.join_room_response != undefined) {
                    this.join_room_response = data.join_room_response;
                }
                if ("join_room_broadcast" in data && data.join_room_broadcast != undefined) {
                    this.join_room_broadcast = data.join_room_broadcast;
                }
                if ("disconnect_broadcast" in data && data.disconnect_broadcast != undefined) {
                    this.disconnect_broadcast = data.disconnect_broadcast;
                }
                if ("complete_question_response" in data && data.complete_question_response != undefined) {
                    this.complete_question_response = data.complete_question_response;
                }
                if ("submit_rating_response" in data && data.submit_rating_response != undefined) {
                    this.submit_rating_response = data.submit_rating_response;
                }
                if ("leave_room_response" in data && data.leave_room_response != undefined) {
                    this.leave_room_response = data.leave_room_response;
                }
                if ("leave_room_broadcast" in data && data.leave_room_broadcast != undefined) {
                    this.leave_room_broadcast = data.leave_room_broadcast;
                }
            }
        }
        get join_room_response() {
            return pb_1.Message.getWrapperField(this, JoinRoomResponse, 1) as JoinRoomResponse;
        }
        set join_room_response(value: JoinRoomResponse) {
            pb_1.Message.setOneofWrapperField(this, 1, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get join_room_broadcast() {
            return pb_1.Message.getWrapperField(this, JoinRoomBroadcast, 2) as JoinRoomBroadcast;
        }
        set join_room_broadcast(value: JoinRoomBroadcast) {
            pb_1.Message.setOneofWrapperField(this, 2, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get disconnect_broadcast() {
            return pb_1.Message.getWrapperField(this, DisconnectBroadcast, 3) as DisconnectBroadcast;
        }
        set disconnect_broadcast(value: DisconnectBroadcast) {
            pb_1.Message.setOneofWrapperField(this, 3, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get complete_question_response() {
            return pb_1.Message.getWrapperField(this, CompleteQuestionResponse, 4) as CompleteQuestionResponse;
        }
        set complete_question_response(value: CompleteQuestionResponse) {
            pb_1.Message.setOneofWrapperField(this, 4, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get submit_rating_response() {
            return pb_1.Message.getWrapperField(this, SubmitRatingResponse, 5) as SubmitRatingResponse;
        }
        set submit_rating_response(value: SubmitRatingResponse) {
            pb_1.Message.setOneofWrapperField(this, 5, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get leave_room_response() {
            return pb_1.Message.getWrapperField(this, LeaveRoomResponse, 6) as LeaveRoomResponse;
        }
        set leave_room_response(value: LeaveRoomResponse) {
            pb_1.Message.setOneofWrapperField(this, 6, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get leave_room_broadcast() {
            return pb_1.Message.getWrapperField(this, LeaveRoomBroadcast, 7) as LeaveRoomBroadcast;
        }
        set leave_room_broadcast(value: LeaveRoomBroadcast) {
            pb_1.Message.setOneofWrapperField(this, 7, [1, 2, 3, 4, 5, 6, 7], value);
        }
        get response() {
            const cases: {
                [index: number]: "none" | "join_room_response" | "join_room_broadcast" | "disconnect_broadcast" | "complete_question_response" | "submit_rating_response" | "leave_room_response" | "leave_room_broadcast";
            } = {
                0: "none",
                1: "join_room_response",
                2: "join_room_broadcast",
                3: "disconnect_broadcast",
                4: "complete_question_response",
                5: "submit_rating_response",
                6: "leave_room_response",
                7: "leave_room_broadcast"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7])];
        }
        static fromObject(data: {
            join_room_response?: ReturnType<typeof JoinRoomResponse.prototype.toObject>;
            join_room_broadcast?: ReturnType<typeof JoinRoomBroadcast.prototype.toObject>;
            disconnect_broadcast?: ReturnType<typeof DisconnectBroadcast.prototype.toObject>;
            complete_question_response?: ReturnType<typeof CompleteQuestionResponse.prototype.toObject>;
            submit_rating_response?: ReturnType<typeof SubmitRatingResponse.prototype.toObject>;
            leave_room_response?: ReturnType<typeof LeaveRoomResponse.prototype.toObject>;
            leave_room_broadcast?: ReturnType<typeof LeaveRoomBroadcast.prototype.toObject>;
        }) {
            const message = new RoomServiceToClientMessage({});
            if (data.join_room_response != null) {
                message.join_room_response = JoinRoomResponse.fromObject(data.join_room_response);
            }
            if (data.join_room_broadcast != null) {
                message.join_room_broadcast = JoinRoomBroadcast.fromObject(data.join_room_broadcast);
            }
            if (data.disconnect_broadcast != null) {
                message.disconnect_broadcast = DisconnectBroadcast.fromObject(data.disconnect_broadcast);
            }
            if (data.complete_question_response != null) {
                message.complete_question_response = CompleteQuestionResponse.fromObject(data.complete_question_response);
            }
            if (data.submit_rating_response != null) {
                message.submit_rating_response = SubmitRatingResponse.fromObject(data.submit_rating_response);
            }
            if (data.leave_room_response != null) {
                message.leave_room_response = LeaveRoomResponse.fromObject(data.leave_room_response);
            }
            if (data.leave_room_broadcast != null) {
                message.leave_room_broadcast = LeaveRoomBroadcast.fromObject(data.leave_room_broadcast);
            }
            return message;
        }
        toObject() {
            const data: {
                join_room_response?: ReturnType<typeof JoinRoomResponse.prototype.toObject>;
                join_room_broadcast?: ReturnType<typeof JoinRoomBroadcast.prototype.toObject>;
                disconnect_broadcast?: ReturnType<typeof DisconnectBroadcast.prototype.toObject>;
                complete_question_response?: ReturnType<typeof CompleteQuestionResponse.prototype.toObject>;
                submit_rating_response?: ReturnType<typeof SubmitRatingResponse.prototype.toObject>;
                leave_room_response?: ReturnType<typeof LeaveRoomResponse.prototype.toObject>;
                leave_room_broadcast?: ReturnType<typeof LeaveRoomBroadcast.prototype.toObject>;
            } = {};
            if (this.join_room_response != null) {
                data.join_room_response = this.join_room_response.toObject();
            }
            if (this.join_room_broadcast != null) {
                data.join_room_broadcast = this.join_room_broadcast.toObject();
            }
            if (this.disconnect_broadcast != null) {
                data.disconnect_broadcast = this.disconnect_broadcast.toObject();
            }
            if (this.complete_question_response != null) {
                data.complete_question_response = this.complete_question_response.toObject();
            }
            if (this.submit_rating_response != null) {
                data.submit_rating_response = this.submit_rating_response.toObject();
            }
            if (this.leave_room_response != null) {
                data.leave_room_response = this.leave_room_response.toObject();
            }
            if (this.leave_room_broadcast != null) {
                data.leave_room_broadcast = this.leave_room_broadcast.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.join_room_response !== undefined)
                writer.writeMessage(1, this.join_room_response, () => this.join_room_response.serialize(writer));
            if (this.join_room_broadcast !== undefined)
                writer.writeMessage(2, this.join_room_broadcast, () => this.join_room_broadcast.serialize(writer));
            if (this.disconnect_broadcast !== undefined)
                writer.writeMessage(3, this.disconnect_broadcast, () => this.disconnect_broadcast.serialize(writer));
            if (this.complete_question_response !== undefined)
                writer.writeMessage(4, this.complete_question_response, () => this.complete_question_response.serialize(writer));
            if (this.submit_rating_response !== undefined)
                writer.writeMessage(5, this.submit_rating_response, () => this.submit_rating_response.serialize(writer));
            if (this.leave_room_response !== undefined)
                writer.writeMessage(6, this.leave_room_response, () => this.leave_room_response.serialize(writer));
            if (this.leave_room_broadcast !== undefined)
                writer.writeMessage(7, this.leave_room_broadcast, () => this.leave_room_broadcast.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoomServiceToClientMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoomServiceToClientMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.join_room_response, () => message.join_room_response = JoinRoomResponse.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.join_room_broadcast, () => message.join_room_broadcast = JoinRoomBroadcast.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.disconnect_broadcast, () => message.disconnect_broadcast = DisconnectBroadcast.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.complete_question_response, () => message.complete_question_response = CompleteQuestionResponse.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.submit_rating_response, () => message.submit_rating_response = SubmitRatingResponse.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.leave_room_response, () => message.leave_room_response = LeaveRoomResponse.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.leave_room_broadcast, () => message.leave_room_broadcast = LeaveRoomBroadcast.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RoomServiceToClientMessage {
            return RoomServiceToClientMessage.deserialize(bytes);
        }
    }
    export class JoinRoomRequest extends pb_1.Message {
        constructor(data?: any[] | {
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            room_id?: string;
        }) {
            const message = new JoinRoomRequest({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.room_id === "string" && this.room_id.length)
                writer.writeString(1, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinRoomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinRoomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinRoomRequest {
            return JoinRoomRequest.deserialize(bytes);
        }
    }
    export class JoinRoomResponse extends pb_1.Message {
        constructor(data?: any[] | {
            error_code?: number;
            is_interviewer?: boolean;
            interviewer_id?: string;
            question?: QuestionMessage;
            paired_user?: User;
            turns_completed?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_code" in data && data.error_code != undefined) {
                    this.error_code = data.error_code;
                }
                if ("is_interviewer" in data && data.is_interviewer != undefined) {
                    this.is_interviewer = data.is_interviewer;
                }
                if ("interviewer_id" in data && data.interviewer_id != undefined) {
                    this.interviewer_id = data.interviewer_id;
                }
                if ("question" in data && data.question != undefined) {
                    this.question = data.question;
                }
                if ("paired_user" in data && data.paired_user != undefined) {
                    this.paired_user = data.paired_user;
                }
                if ("turns_completed" in data && data.turns_completed != undefined) {
                    this.turns_completed = data.turns_completed;
                }
            }
        }
        get error_code() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set error_code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_interviewer() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set is_interviewer(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get interviewer_id() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set interviewer_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get question() {
            return pb_1.Message.getWrapperField(this, QuestionMessage, 4) as QuestionMessage;
        }
        set question(value: QuestionMessage) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get paired_user() {
            return pb_1.Message.getWrapperField(this, User, 5) as User;
        }
        set paired_user(value: User) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get turns_completed() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set turns_completed(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            error_code?: number;
            is_interviewer?: boolean;
            interviewer_id?: string;
            question?: ReturnType<typeof QuestionMessage.prototype.toObject>;
            paired_user?: ReturnType<typeof User.prototype.toObject>;
            turns_completed?: number;
        }) {
            const message = new JoinRoomResponse({});
            if (data.error_code != null) {
                message.error_code = data.error_code;
            }
            if (data.is_interviewer != null) {
                message.is_interviewer = data.is_interviewer;
            }
            if (data.interviewer_id != null) {
                message.interviewer_id = data.interviewer_id;
            }
            if (data.question != null) {
                message.question = QuestionMessage.fromObject(data.question);
            }
            if (data.paired_user != null) {
                message.paired_user = User.fromObject(data.paired_user);
            }
            if (data.turns_completed != null) {
                message.turns_completed = data.turns_completed;
            }
            return message;
        }
        toObject() {
            const data: {
                error_code?: number;
                is_interviewer?: boolean;
                interviewer_id?: string;
                question?: ReturnType<typeof QuestionMessage.prototype.toObject>;
                paired_user?: ReturnType<typeof User.prototype.toObject>;
                turns_completed?: number;
            } = {};
            if (this.error_code != null) {
                data.error_code = this.error_code;
            }
            if (this.is_interviewer != null) {
                data.is_interviewer = this.is_interviewer;
            }
            if (this.interviewer_id != null) {
                data.interviewer_id = this.interviewer_id;
            }
            if (this.question != null) {
                data.question = this.question.toObject();
            }
            if (this.paired_user != null) {
                data.paired_user = this.paired_user.toObject();
            }
            if (this.turns_completed != null) {
                data.turns_completed = this.turns_completed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_code !== undefined)
                writer.writeInt32(1, this.error_code);
            if (this.is_interviewer !== undefined)
                writer.writeBool(2, this.is_interviewer);
            if (typeof this.interviewer_id === "string" && this.interviewer_id.length)
                writer.writeString(3, this.interviewer_id);
            if (this.question !== undefined)
                writer.writeMessage(4, this.question, () => this.question.serialize(writer));
            if (this.paired_user !== undefined)
                writer.writeMessage(5, this.paired_user, () => this.paired_user.serialize(writer));
            if (this.turns_completed !== undefined)
                writer.writeInt32(6, this.turns_completed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_code = reader.readInt32();
                        break;
                    case 2:
                        message.is_interviewer = reader.readBool();
                        break;
                    case 3:
                        message.interviewer_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.question, () => message.question = QuestionMessage.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.paired_user, () => message.paired_user = User.deserialize(reader));
                        break;
                    case 6:
                        message.turns_completed = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinRoomResponse {
            return JoinRoomResponse.deserialize(bytes);
        }
    }
    export class JoinRoomBroadcast extends pb_1.Message {
        constructor(data?: any[] | {
            joined_uid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("joined_uid" in data && data.joined_uid != undefined) {
                    this.joined_uid = data.joined_uid;
                }
            }
        }
        get joined_uid() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set joined_uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            joined_uid?: string;
        }) {
            const message = new JoinRoomBroadcast({});
            if (data.joined_uid != null) {
                message.joined_uid = data.joined_uid;
            }
            return message;
        }
        toObject() {
            const data: {
                joined_uid?: string;
            } = {};
            if (this.joined_uid != null) {
                data.joined_uid = this.joined_uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.joined_uid === "string" && this.joined_uid.length)
                writer.writeString(1, this.joined_uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JoinRoomBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JoinRoomBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.joined_uid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): JoinRoomBroadcast {
            return JoinRoomBroadcast.deserialize(bytes);
        }
    }
    export class DisconnectBroadcast extends pb_1.Message {
        constructor(data?: any[] | {
            disconnected_uid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("disconnected_uid" in data && data.disconnected_uid != undefined) {
                    this.disconnected_uid = data.disconnected_uid;
                }
            }
        }
        get disconnected_uid() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set disconnected_uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            disconnected_uid?: string;
        }) {
            const message = new DisconnectBroadcast({});
            if (data.disconnected_uid != null) {
                message.disconnected_uid = data.disconnected_uid;
            }
            return message;
        }
        toObject() {
            const data: {
                disconnected_uid?: string;
            } = {};
            if (this.disconnected_uid != null) {
                data.disconnected_uid = this.disconnected_uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.disconnected_uid === "string" && this.disconnected_uid.length)
                writer.writeString(1, this.disconnected_uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisconnectBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisconnectBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.disconnected_uid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisconnectBroadcast {
            return DisconnectBroadcast.deserialize(bytes);
        }
    }
    export class CompleteQuestionRequest extends pb_1.Message {
        constructor(data?: any[] | {
            room_id?: string;
            is_solved?: boolean;
            feedback_to_interviewee?: string;
            code_written?: string;
            language?: Language;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("is_solved" in data && data.is_solved != undefined) {
                    this.is_solved = data.is_solved;
                }
                if ("feedback_to_interviewee" in data && data.feedback_to_interviewee != undefined) {
                    this.feedback_to_interviewee = data.feedback_to_interviewee;
                }
                if ("code_written" in data && data.code_written != undefined) {
                    this.code_written = data.code_written;
                }
                if ("language" in data && data.language != undefined) {
                    this.language = data.language;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_solved() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set is_solved(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get feedback_to_interviewee() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set feedback_to_interviewee(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get code_written() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set code_written(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get language() {
            return pb_1.Message.getField(this, 5) as Language;
        }
        set language(value: Language) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            room_id?: string;
            is_solved?: boolean;
            feedback_to_interviewee?: string;
            code_written?: string;
            language?: Language;
        }) {
            const message = new CompleteQuestionRequest({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.is_solved != null) {
                message.is_solved = data.is_solved;
            }
            if (data.feedback_to_interviewee != null) {
                message.feedback_to_interviewee = data.feedback_to_interviewee;
            }
            if (data.code_written != null) {
                message.code_written = data.code_written;
            }
            if (data.language != null) {
                message.language = data.language;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                is_solved?: boolean;
                feedback_to_interviewee?: string;
                code_written?: string;
                language?: Language;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.is_solved != null) {
                data.is_solved = this.is_solved;
            }
            if (this.feedback_to_interviewee != null) {
                data.feedback_to_interviewee = this.feedback_to_interviewee;
            }
            if (this.code_written != null) {
                data.code_written = this.code_written;
            }
            if (this.language != null) {
                data.language = this.language;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.room_id === "string" && this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.is_solved !== undefined)
                writer.writeBool(2, this.is_solved);
            if (typeof this.feedback_to_interviewee === "string" && this.feedback_to_interviewee.length)
                writer.writeString(3, this.feedback_to_interviewee);
            if (typeof this.code_written === "string" && this.code_written.length)
                writer.writeString(4, this.code_written);
            if (this.language !== undefined)
                writer.writeEnum(5, this.language);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteQuestionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteQuestionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.is_solved = reader.readBool();
                        break;
                    case 3:
                        message.feedback_to_interviewee = reader.readString();
                        break;
                    case 4:
                        message.code_written = reader.readString();
                        break;
                    case 5:
                        message.language = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompleteQuestionRequest {
            return CompleteQuestionRequest.deserialize(bytes);
        }
    }
    export class CompleteQuestionResponse extends pb_1.Message {
        constructor(data?: any[] | {
            error_code?: number;
            is_interviewer?: boolean;
            interviewer_id?: string;
            next_question?: QuestionMessage;
            is_interview_completed?: boolean;
            turns_completed?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_code" in data && data.error_code != undefined) {
                    this.error_code = data.error_code;
                }
                if ("is_interviewer" in data && data.is_interviewer != undefined) {
                    this.is_interviewer = data.is_interviewer;
                }
                if ("interviewer_id" in data && data.interviewer_id != undefined) {
                    this.interviewer_id = data.interviewer_id;
                }
                if ("next_question" in data && data.next_question != undefined) {
                    this.next_question = data.next_question;
                }
                if ("is_interview_completed" in data && data.is_interview_completed != undefined) {
                    this.is_interview_completed = data.is_interview_completed;
                }
                if ("turns_completed" in data && data.turns_completed != undefined) {
                    this.turns_completed = data.turns_completed;
                }
            }
        }
        get error_code() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set error_code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_interviewer() {
            return pb_1.Message.getField(this, 2) as boolean;
        }
        set is_interviewer(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get interviewer_id() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set interviewer_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get next_question() {
            return pb_1.Message.getWrapperField(this, QuestionMessage, 4) as QuestionMessage;
        }
        set next_question(value: QuestionMessage) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get is_interview_completed() {
            return pb_1.Message.getField(this, 5) as boolean;
        }
        set is_interview_completed(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get turns_completed() {
            return pb_1.Message.getField(this, 6) as number;
        }
        set turns_completed(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            error_code?: number;
            is_interviewer?: boolean;
            interviewer_id?: string;
            next_question?: ReturnType<typeof QuestionMessage.prototype.toObject>;
            is_interview_completed?: boolean;
            turns_completed?: number;
        }) {
            const message = new CompleteQuestionResponse({});
            if (data.error_code != null) {
                message.error_code = data.error_code;
            }
            if (data.is_interviewer != null) {
                message.is_interviewer = data.is_interviewer;
            }
            if (data.interviewer_id != null) {
                message.interviewer_id = data.interviewer_id;
            }
            if (data.next_question != null) {
                message.next_question = QuestionMessage.fromObject(data.next_question);
            }
            if (data.is_interview_completed != null) {
                message.is_interview_completed = data.is_interview_completed;
            }
            if (data.turns_completed != null) {
                message.turns_completed = data.turns_completed;
            }
            return message;
        }
        toObject() {
            const data: {
                error_code?: number;
                is_interviewer?: boolean;
                interviewer_id?: string;
                next_question?: ReturnType<typeof QuestionMessage.prototype.toObject>;
                is_interview_completed?: boolean;
                turns_completed?: number;
            } = {};
            if (this.error_code != null) {
                data.error_code = this.error_code;
            }
            if (this.is_interviewer != null) {
                data.is_interviewer = this.is_interviewer;
            }
            if (this.interviewer_id != null) {
                data.interviewer_id = this.interviewer_id;
            }
            if (this.next_question != null) {
                data.next_question = this.next_question.toObject();
            }
            if (this.is_interview_completed != null) {
                data.is_interview_completed = this.is_interview_completed;
            }
            if (this.turns_completed != null) {
                data.turns_completed = this.turns_completed;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_code !== undefined)
                writer.writeInt32(1, this.error_code);
            if (this.is_interviewer !== undefined)
                writer.writeBool(2, this.is_interviewer);
            if (typeof this.interviewer_id === "string" && this.interviewer_id.length)
                writer.writeString(3, this.interviewer_id);
            if (this.next_question !== undefined)
                writer.writeMessage(4, this.next_question, () => this.next_question.serialize(writer));
            if (this.is_interview_completed !== undefined)
                writer.writeBool(5, this.is_interview_completed);
            if (this.turns_completed !== undefined)
                writer.writeInt32(6, this.turns_completed);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CompleteQuestionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompleteQuestionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_code = reader.readInt32();
                        break;
                    case 2:
                        message.is_interviewer = reader.readBool();
                        break;
                    case 3:
                        message.interviewer_id = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.next_question, () => message.next_question = QuestionMessage.deserialize(reader));
                        break;
                    case 5:
                        message.is_interview_completed = reader.readBool();
                        break;
                    case 6:
                        message.turns_completed = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CompleteQuestionResponse {
            return CompleteQuestionResponse.deserialize(bytes);
        }
    }
    export class SubmitRatingRequest extends pb_1.Message {
        constructor(data?: any[] | {
            room_id?: string;
            rating?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("rating" in data && data.rating != undefined) {
                    this.rating = data.rating;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get rating() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set rating(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            room_id?: string;
            rating?: number;
        }) {
            const message = new SubmitRatingRequest({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.rating != null) {
                message.rating = data.rating;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
                rating?: number;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.rating != null) {
                data.rating = this.rating;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.room_id === "string" && this.room_id.length)
                writer.writeString(1, this.room_id);
            if (this.rating !== undefined)
                writer.writeInt32(2, this.rating);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitRatingRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitRatingRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    case 2:
                        message.rating = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubmitRatingRequest {
            return SubmitRatingRequest.deserialize(bytes);
        }
    }
    export class SubmitRatingResponse extends pb_1.Message {
        constructor(data?: any[] | {
            error_code?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_code" in data && data.error_code != undefined) {
                    this.error_code = data.error_code;
                }
            }
        }
        get error_code() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set error_code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            error_code?: number;
        }) {
            const message = new SubmitRatingResponse({});
            if (data.error_code != null) {
                message.error_code = data.error_code;
            }
            return message;
        }
        toObject() {
            const data: {
                error_code?: number;
            } = {};
            if (this.error_code != null) {
                data.error_code = this.error_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_code !== undefined)
                writer.writeInt32(1, this.error_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SubmitRatingResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SubmitRatingResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_code = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SubmitRatingResponse {
            return SubmitRatingResponse.deserialize(bytes);
        }
    }
    export class LeaveRoomRequest extends pb_1.Message {
        constructor(data?: any[] | {
            room_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
            }
        }
        get room_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            room_id?: string;
        }) {
            const message = new LeaveRoomRequest({});
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            return message;
        }
        toObject() {
            const data: {
                room_id?: string;
            } = {};
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.room_id === "string" && this.room_id.length)
                writer.writeString(1, this.room_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaveRoomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaveRoomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.room_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaveRoomRequest {
            return LeaveRoomRequest.deserialize(bytes);
        }
    }
    export class LeaveRoomResponse extends pb_1.Message {
        constructor(data?: any[] | {
            error_code?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("error_code" in data && data.error_code != undefined) {
                    this.error_code = data.error_code;
                }
            }
        }
        get error_code() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set error_code(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            error_code?: number;
        }) {
            const message = new LeaveRoomResponse({});
            if (data.error_code != null) {
                message.error_code = data.error_code;
            }
            return message;
        }
        toObject() {
            const data: {
                error_code?: number;
            } = {};
            if (this.error_code != null) {
                data.error_code = this.error_code;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.error_code !== undefined)
                writer.writeInt32(1, this.error_code);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaveRoomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaveRoomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.error_code = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaveRoomResponse {
            return LeaveRoomResponse.deserialize(bytes);
        }
    }
    export class LeaveRoomBroadcast extends pb_1.Message {
        constructor(data?: any[] | {
            left_uid?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("left_uid" in data && data.left_uid != undefined) {
                    this.left_uid = data.left_uid;
                }
            }
        }
        get left_uid() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set left_uid(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            left_uid?: string;
        }) {
            const message = new LeaveRoomBroadcast({});
            if (data.left_uid != null) {
                message.left_uid = data.left_uid;
            }
            return message;
        }
        toObject() {
            const data: {
                left_uid?: string;
            } = {};
            if (this.left_uid != null) {
                data.left_uid = this.left_uid;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.left_uid === "string" && this.left_uid.length)
                writer.writeString(1, this.left_uid);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LeaveRoomBroadcast {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LeaveRoomBroadcast();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.left_uid = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LeaveRoomBroadcast {
            return LeaveRoomBroadcast.deserialize(bytes);
        }
    }
}
